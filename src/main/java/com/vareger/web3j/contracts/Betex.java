package com.vareger.web3j.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.1.
 */
public class Betex extends Contract {
    private static final String BINARY = "0x60806040526607fe5cf2bea00060035566470de4df82000060045534801561002657600080fd5b506040516040806127578339810180604052604081101561004657600080fd5b50805160209091015160008054600160a060020a03938416600160a060020a03199182168117909255600180549490931693811693909317825560058054909316179091556002556126ba8061009d6000396000f3fe6080604052600436106100d75763ffffffff60e060020a6000350416631287468881146100dc578063370727801461010857806337c07f781461012f57806339d6d6d21461015f5780633bd6cad6146101745780633e109a19146101a457806340de7ab9146101b95780635eeedbf4146101ea578063919ad6b6146101ff578063b6f8184d14610214578063b8343a8014610244578063b938835d14610259578063be5a3e6114610292578063d2d4aacd146102a7578063d991ed86146102ef578063e6aad0931461031f578063fe2c13c414610363575b600080fd5b3480156100e857600080fd5b50610106600480360360208110156100ff57600080fd5b503561038d565b005b34801561011457600080fd5b5061011d610426565b60408051918252519081900360200190f35b34801561013b57600080fd5b506101066004803603602081101561015257600080fd5b503563ffffffff1661042c565b34801561016b57600080fd5b5061011d610626565b34801561018057600080fd5b5061011d6004803603602081101561019757600080fd5b503563ffffffff166106b5565b3480156101b057600080fd5b5061011d610751565b3480156101c557600080fd5b506101ce610757565b60408051600160a060020a039092168252519081900360200190f35b3480156101f657600080fd5b506101ce610766565b34801561020b57600080fd5b5061011d610775565b34801561022057600080fd5b5061011d6004803603602081101561023757600080fd5b503563ffffffff1661077b565b34801561025057600080fd5b5061011d6107e5565b34801561026557600080fd5b506101066004803603604081101561027c57600080fd5b50600160a060020a038135169060200135610a26565b34801561029e57600080fd5b50610106610c21565b3480156102b357600080fd5b50610106600480360360808110156102ca57600080fd5b5063ffffffff8135811691602081013582169160408201358116916060013516610f34565b3480156102fb57600080fd5b506101066004803603602081101561031257600080fd5b503563ffffffff166114aa565b6101066004803603608081101561033557600080fd5b50600160a060020a038135169063ffffffff602082013581169160408101358216916060909101351661156c565b34801561036f57600080fd5b506101066004803603602081101561038657600080fd5b5035611880565b600154600160a060020a031633146103c9576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b60008111610421576040805160e560020a62461bcd02815260206004820152601460248201527f4d696e2062696420697320696e636f7272656374000000000000000000000000604482015290519081900360640190fd5b600455565b60035481565b600154600160a060020a03163314610468576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600554604080517fe14891910000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163e1489191916004808301926020929190829003018186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d60208110156104f057600080fd5b5051600554604080517fe60548c200000000000000000000000000000000000000000000000000000000815263ffffffff861660048201529051929350600092600160a060020a039092169163e60548c291602480820192602092909190829003018186803b15801561056257600080fd5b505afa158015610576573d6000803e3d6000fd5b505050506040513d602081101561058c57600080fd5b5051604080517f106805c60000000000000000000000000000000000000000000000000000000081526004810183905263ffffffff861660248201529051919250600160a060020a0384169163106805c69160448082019260009290919082900301818387803b1580156105ff57600080fd5b505af1158015610613573d6000803e3d6000fd5b505050506106218382611927565b505050565b600554604080517f4c9b44e40000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691634c9b44e4916004808301926020929190829003018186803b15801561068457600080fd5b505afa158015610698573d6000803e3d6000fd5b505050506040513d60208110156106ae57600080fd5b5051905090565b600554604080517fe60548c200000000000000000000000000000000000000000000000000000000815263ffffffff841660048201529051600092600160a060020a03169163e60548c2916024808301926020929190829003018186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d602081101561074957600080fd5b505192915050565b60045481565b600154600160a060020a031681565b600054600160a060020a031681565b60025481565b600554604080517fb6f8184d00000000000000000000000000000000000000000000000000000000815263ffffffff841660048201529051600092600160a060020a03169163b6f8184d916024808301926020929190829003018186803b15801561071f57600080fd5b600080600090506000600560009054906101000a9004600160a060020a0316600160a060020a031663e14891916040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561083f57600080fd5b505afa158015610853573d6000803e3d6000fd5b505050506040513d602081101561086957600080fd5b5051604080517f5968327d00000000000000000000000000000000000000000000000000000000815290519192508291606091600160a060020a03841691635968327d91600480820192600092909190829003018186803b1580156108cd57600080fd5b505afa1580156108e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561090a57600080fd5b81019080805164010000000081111561092257600080fd5b8201602081018481111561093557600080fd5b815185602082028301116401000000008211171561095257600080fd5b50909450600093505050505b8151811015610a1c576005548251610a1291600160a060020a03169063e60548c29085908590811061098c57fe5b906020019060200201516040518263ffffffff1660e060020a028152600401808263ffffffff1663ffffffff16815260200191505060206040518083038186803b1580156109d957600080fd5b505afa1580156109ed573d6000803e3d6000fd5b505050506040513d6020811015610a0357600080fd5b5051869063ffffffff6119b516565b945060010161095e565b5092935050505090565b600154600160a060020a03163314610a62576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600160a060020a03821615801590610a885750600054600160a060020a03838116911614155b1515610b04576040805160e560020a62461bcd02815260206004820152602b60248201527f547279207472616e7366657220746f20307830206f7220626574657853746f7260448201527f6167652061646472657373000000000000000000000000000000000000000000606482015290519081900360840190fd5b600554604080517f153f0465000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163153f04659160248082019260009290919082900301818387803b158015610b6a57600080fd5b505af1158015610b7e573d6000803e3d6000fd5b5050600554604080517f94081e21000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301526024820187905291519190921693506394081e21925060448083019260209291908290030181600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050506040513d6020811015610c1b57600080fd5b50505050565b600154600160a060020a03163314610c5d576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600554604080517fe14891910000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163e1489191916004808301926020929190829003018186803b158015610cbb57600080fd5b505afa158015610ccf573d6000803e3d6000fd5b505050506040513d6020811015610ce557600080fd5b5051604080517f5968327d00000000000000000000000000000000000000000000000000000000815290519192508291606091600160a060020a03841691635968327d91600480820192600092909190829003018186803b158015610d4957600080fd5b505afa158015610d5d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d8657600080fd5b810190808051640100000000811115610d9e57600080fd5b82016020810184811115610db157600080fd5b8151856020820283011164010000000082111715610dce57600080fd5b50909450600093505050505b8151811015610c1b5760008282815181101515610df357fe5b6020908102909101810151600554604080517fe60548c200000000000000000000000000000000000000000000000000000000815263ffffffff841660048201529051929450600093600160a060020a039092169263e60548c292602480840193919291829003018186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d6020811015610e9557600080fd5b5051604080517f106805c60000000000000000000000000000000000000000000000000000000081526004810183905263ffffffff851660248201529051919250600160a060020a0388169163106805c69160448082019260009290919082900301818387803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b50505050610f2a8282611927565b5050600101610dda565b600154600160a060020a03163314610f70576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b8163ffffffff1660011480610f8b57508163ffffffff166002145b80610f9c57508163ffffffff166003145b1515610fcc576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b8263ffffffff168463ffffffff161415610fe557610c1b565b610fed61262c565b610ff6826119d0565b805190915063ffffffff83811691161461105a576040805160e560020a62461bcd02815260206004820152601460248201527f4261736b6574206973206e6f742065786973742e000000000000000000000000604482015290519081900360640190fd5b8263ffffffff16600381111561106c57fe5b8160a00190600381111561107c57fe5b9081600381111561108957fe5b905250604081015160208201510160008060018460a0015160038111156110ac57fe5b14156110c3575050602082015160408301516110e8565b60028460a0015160038111156110d557fe5b14156110e8575050604082015160208301515b60028054600091016111118561110585606463ffffffff611b0816565b9063ffffffff611b3316565b101561111b575060015b885b8863ffffffff168163ffffffff16101561149e5761113961265f565b6111438883611b57565b905060008760a00151600381111561115757fe5b1480611172575060038760a00151600381111561117057fe5b145b8061117b575083155b80611184575084155b8061118c5750825b156112e457806060015115156112df576005548151602080840151604080517f94081e21000000000000000000000000000000000000000000000000000000008152600160a060020a03948516600482015260248101929092525192909316926394081e2192604480830193928290030181600087803b15801561120f57600080fd5b505af1158015611223573d6000803e3d6000fd5b505050506040513d602081101561123957600080fd5b505060016060820152611253818963ffffffff8516611c8d565b61125c87611d59565b8051602082015160408301517f5f913e67596082ccbadaefe89a60c711a5e4cf28fcef2e2f923ef7e0f022154f9291908190600381111561129957fe5b8b5160408051600160a060020a03909616865260208601949094528484019290925263ffffffff90811660608501521660808301524260a0830152519081900360c00190a15b611495565b8660a0015160038111156112f457fe5b8160400151600381111561130457fe5b14801561131357508060600151155b156113dd5760006113338260000151836020015189898660800151611dfd565b60016060840152905061134d828a63ffffffff8616611c8d565b61135688611d59565b7f5f913e67596082ccbadaefe89a60c711a5e4cf28fcef2e2f923ef7e0f022154f82600001518360200151838560400151600381111561139257fe5b8c5160408051600160a060020a03909616865260208601949094528484019290925263ffffffff90811660608501521660808301524260a0830152519081900360c00190a150611495565b80606001511515611495576113fa816020015182608001516121b7565b60016060820152611412818963ffffffff8516611c8d565b7f5f913e67596082ccbadaefe89a60c711a5e4cf28fcef2e2f923ef7e0f022154f8160000151826020015160008460400151600381111561144f57fe5b8b5160408051600160a060020a03909616865260208601949094528484019290925263ffffffff90811660608501521660808301524260a0830152519081900360c00190a15b5060010161111d565b50505050505050505050565b600154600160a060020a031633146114e6576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600554604080517f0f2b994000000000000000000000000000000000000000000000000000000000815263ffffffff841660048201529051600160a060020a0390921691630f2b99409160248082019260009290919082900301818387803b15801561155157600080fd5b505af1158015611565573d6000803e3d6000fd5b5050505050565b600554604080517f0a9b406f00000000000000000000000000000000000000000000000000000000815263ffffffff8516600482015290518492600160a060020a031691630a9b406f916024808301926020929190829003018186803b1580156115d557600080fd5b505afa1580156115e9573d6000803e3d6000fd5b505050506040513d60208110156115ff57600080fd5b50511515611631576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600154600160a060020a0316331461166d576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b8363ffffffff166001148061168857508363ffffffff166002145b15156116de576040805160e560020a62461bcd02815260206004820152601260248201527f496e636f72726563742062696420747970650000000000000000000000000000604482015290519081900360640190fd5b6004543490811015611760576040805160e560020a62461bcd02815260206004820152602360248201527f4269642076616c7565206861766520746f20626520677265617465722074686160448201527f6e20300000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600554604080517f74d0acf9000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301526024820185905263ffffffff808a166044840152600060648401819052818a16608485015290881660a484015292519316926374d0acf992859260c4808201939182900301818588803b1580156117f057600080fd5b505af1158015611804573d6000803e3d6000fd5b505050505061181481868661226a565b60408051600160a060020a03881681526020810183905263ffffffff808816828401528087166060830152851660808201524260a082015290517f0aa405abf18a5ea6e045ffa5f76c2dddb7ce2b63f8406293893a1c7fdce891d19181900360c00190a1505050505050565b600154600160a060020a031633146118bc576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b6000811180156118cc5750606481105b1515611922576040805160e560020a62461bcd02815260206004820152601c60248201527f496e636f727265637420636f6d6d697373696f6e2070657263656e7400000000604482015290519081900360640190fd5b600255565b600554604080517fea02ced900000000000000000000000000000000000000000000000000000000815263ffffffff85166004820152602481018490529051600160a060020a039092169163ea02ced99160448082019260009290919082900301818387803b15801561199957600080fd5b505af11580156119ad573d6000803e3d6000fd5b505050505050565b6000828201838110156119c757600080fd5b90505b92915050565b6119d861262c565b600554604080517fd521e02800000000000000000000000000000000000000000000000000000000815263ffffffff85166004820152905160009283928392839283928392600160a060020a039092169163d521e0289160248082019260c092909190829003018186803b158015611a4f57600080fd5b505afa158015611a63573d6000803e3d6000fd5b505050506040513d60c0811015611a7957600080fd5b50805160208083015160408085015160608087015160808089015160a0998a0151865160c08101885263ffffffff808c1682529981018990529687018690528884169487019490945287811691860191909152969d50939b509099509197509295509350909182019083166003811115611aef57fe5b6003811115611afa57fe5b905298975050505050505050565b6000821515611b19575060006119ca565b828202828482811515611b2857fe5b04146119c757600080fd5b6000808211611b4157600080fd5b60008284811515611b4e57fe5b04949350505050565b611b5f61265f565b600554604080517f5948f2fd00000000000000000000000000000000000000000000000000000000815263ffffffff80871660048301528516602482015290516000928392839283928392600160a060020a0390911691635948f2fd9160448082019260a092909190829003018186803b158015611bdc57600080fd5b505afa158015611bf0573d6000803e3d6000fd5b505050506040513d60a0811015611c0657600080fd5b5080516020808301516040808501516060860151608090960151825160a081018452600160a060020a0387168152948501849052949a5091985090965092945090925090810163ffffffff85166003811115611c5e57fe5b6003811115611c6957fe5b815260200183151581526020018263ffffffff168152509550505050505092915050565b600554835160208501516040860151600160a060020a039093169263ed8a669a9291906003811115611cbb57fe5b606088015160808901516040805163ffffffff88811660e060020a028252600160a060020a0397909716600482015260248101959095529285166044850152901515606484015287841660848401529290921660a482015260c48101859052905160e480830192600092919082900301818387803b158015611d3c57600080fd5b505af1158015611d50573d6000803e3d6000fd5b50505050505050565b6005548151602083015160408401516060850151608086015160a0870151600160a060020a03909616956218a7fe9594939291906003811115611d9857fe5b6040805163ffffffff89811660e060020a02825297881660048201526024810196909652604486019490945291851660648501528416608484015290921660a4820152905160c480830192600092919082900301818387803b15801561155157600080fd5b600080611e1784611105886298968063ffffffff611b0816565b905060008111611e71576040805160e560020a62461bcd02815260206004820152600c60248201527f50657263656e7420697320300000000000000000000000000000000000000000604482015290519081900360640190fd5b838511611eee576040805160e560020a62461bcd02815260206004820152602660248201527f546f74616c2062696473206c657373207468656e20746f74616c4269644f665760448201527f696e6e6572730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000611f0762989680611105888563ffffffff611b0816565b90506000611f25606461110560025485611b0890919063ffffffff16565b9050611f37828263ffffffff61259716565b91506000611f5560646111058b600254611b0890919063ffffffff16565b600054909150600160a060020a031631831115611fe2576040805160e560020a62461bcd02815260206004820152602d60248201527f726577617264656420616d6f756e74206973206d6f7265207468656e20636f6e60448201527f74726163742062616c616e636500000000000000000000000000000000000000606482015290519081900360840190fd5b600054600160a060020a03163181111561206c576040805160e560020a62461bcd02815260206004820152602f60248201527f636f6d6d697373696f6e20616d6f756e74206973206d6f7265207468656e206360448201527f6f6e74726163742062616c616e63650000000000000000000000000000000000606482015290519081900360840190fd5b60035461208090849063ffffffff61259716565b600554600354604080517f9681782d000000000000000000000000000000000000000000000000000000008152600481019290925251929550600160a060020a0390911691639681782d9160248082019260009290919082900301818387803b1580156120ec57600080fd5b505af1158015612100573d6000803e3d6000fd5b5050505061210e81876125ac565b600554604080517f94081e21000000000000000000000000000000000000000000000000000000008152600160a060020a038d8116600483015260248201879052915191909216916394081e219160448083019260209291908290030181600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b505050506040513d60208110156121a757600080fd5b50929a9950505050505050505050565b60006121d3606461110585600254611b0890919063ffffffff16565b600054909150600160a060020a031631811115612260576040805160e560020a62461bcd02815260206004820152603760248201527f636f6d6d697373696f6e20616d6f756e74206973206d6f7265207468656e206360448201527f6f6e74726163742062616c616e6365206c6f7373657273000000000000000000606482015290519081900360840190fd5b61062181836125ac565b600554604080517fd521e02800000000000000000000000000000000000000000000000000000000815263ffffffff84166004820152905160009283928392839283928392600160a060020a039092169163d521e0289160248082019260c092909190829003018186803b1580156122e157600080fd5b505afa1580156122f5573d6000803e3d6000fd5b505050506040513d60c081101561230b57600080fd5b508051602082015160408301516060840151608085015160a090950151939a5091985096509450909250905061233f61262c565b60c0604051908101604052808863ffffffff1681526020018781526020018681526020018563ffffffff1681526020018463ffffffff1681526020018363ffffffff16600381111561238d57fe5b600381111561239857fe5b9052905063ffffffff878116908916146123e5576040805160c08101825263ffffffff8a16815260006020820181905291810182905260608101829052608081018290529060a082015290505b60018963ffffffff1660038111156123f957fe5b600381111561240457fe5b141561242a576020810180518b01905260808101805160010163ffffffff169052612446565b6040810180518b01905260608101805160010163ffffffff1690525b6005548151602083015160408401516060850151608086015160a0870151600160a060020a03909616956218a7fe959493929190600381111561248557fe5b6040805163ffffffff89811660e060020a02825297881660048201526024810196909652604486019490945291851660648501528416608484015290921660a4820152905160c480830192600092919082900301818387803b1580156124ea57600080fd5b505af11580156124fe573d6000803e3d6000fd5b505050507f680f466426bf27b007977d1c963afd44eccc8cc1dd44712678acee1303ca163a816000015182602001518360400151846080015185606001518660a00151600381111561254c57fe5b6040805163ffffffff978816815260208101969096528581019490945291851660608501528416608084015290921660a082015290519081900360c00190a150505050505050505050565b6000828211156125a657600080fd5b50900390565b6125b681836125ba565b5050565b600554604080517fa8faf00200000000000000000000000000000000000000000000000000000000815263ffffffff85166004820152602481018490529051600160a060020a039092169163a8faf0029160448082019260009290919082900301818387803b15801561199957600080fd5b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6040805160a081018252600080825260208201819052909182019081526000602082018190526040909101529056fea165627a7a72305820007ff7a7065520cbc04a9608654bf916c4543a581c0f045fc1cd034437276e640029";

    public static final String FUNC_GASCOMMISSION = "gasCommission";

    public static final String FUNC_MINBID = "minBid";

    public static final String FUNC_BETEXPROXY = "betexProxy";

    public static final String FUNC_BETEXSTORAGEADDRESS = "betexStorageAddress";

    public static final String FUNC_COMMISSIONPROCENT = "commissionProcent";

    public static final String FUNC_BIDUSER = "bidUser";

    public static final String FUNC_CLOSEBASKET = "closeBasket";

    public static final String FUNC_GETBIDSAMOUNT = "getBidsAmount";

    public static final String FUNC_REWARD = "reward";

    public static final String FUNC_TRANSFERCOMMISSIONFORGAS = "transferCommissionForGas";

    public static final String FUNC_PAYOUTCOMMISSION = "payOutCommission";

    public static final String FUNC_SETCOMMISSIONPROCENT = "setCommissionProcent";

    public static final String FUNC_SETMINBID = "setMinBid";

    public static final String FUNC_GETCOMMISSIONDEBT = "getCommissionDebt";

    public static final String FUNC_GETCOMMISSIONFORGAS = "getCommissionForGas";

    public static final Event BIDUSER_EVENT = new Event("BidUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REWARDUSER_EVENT = new Event("RewardUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BASKETCHANGESTATE_EVENT = new Event("BasketChangeState", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1", "0x995715790c063f9648f5c93db958303abb42736d");
        _addresses.put("3", "0xe1334ebbd67e5b18ccffb62434a8ba1f3a2de6e0");
    }

    @Deprecated
    protected Betex(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Betex(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Betex(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Betex(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> gasCommission() {
        final Function function = new Function(FUNC_GASCOMMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> minBid() {
        final Function function = new Function(FUNC_MINBID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> betexProxy() {
        final Function function = new Function(FUNC_BETEXPROXY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> betexStorageAddress() {
        final Function function = new Function(FUNC_BETEXSTORAGEADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> commissionProcent() {
        final Function function = new Function(FUNC_COMMISSIONPROCENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<BidUserEventResponse> getBidUserEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BIDUSER_EVENT, transactionReceipt);
        ArrayList<BidUserEventResponse> responses = new ArrayList<BidUserEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BidUserEventResponse typedResponse = new BidUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.val = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.bidType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.key = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.brokerId = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BidUserEventResponse> bidUserEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BidUserEventResponse>() {
            @Override
            public BidUserEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BIDUSER_EVENT, log);
                BidUserEventResponse typedResponse = new BidUserEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.val = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.bidType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.key = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.brokerId = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BidUserEventResponse> bidUserEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BIDUSER_EVENT));
        return bidUserEventFlowable(filter);
    }

    public List<RewardUserEventResponse> getRewardUserEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REWARDUSER_EVENT, transactionReceipt);
        ArrayList<RewardUserEventResponse> responses = new ArrayList<RewardUserEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RewardUserEventResponse typedResponse = new RewardUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.val = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.winValue = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.bidType = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.key = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RewardUserEventResponse> rewardUserEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RewardUserEventResponse>() {
            @Override
            public RewardUserEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REWARDUSER_EVENT, log);
                RewardUserEventResponse typedResponse = new RewardUserEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.val = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.winValue = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.bidType = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.key = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RewardUserEventResponse> rewardUserEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REWARDUSER_EVENT));
        return rewardUserEventFlowable(filter);
    }

    public List<BasketChangeStateEventResponse> getBasketChangeStateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BASKETCHANGESTATE_EVENT, transactionReceipt);
        ArrayList<BasketChangeStateEventResponse> responses = new ArrayList<BasketChangeStateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BasketChangeStateEventResponse typedResponse = new BasketChangeStateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.key = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.callTokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.putTokens = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.callAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.putAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.bidType = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BasketChangeStateEventResponse> basketChangeStateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BasketChangeStateEventResponse>() {
            @Override
            public BasketChangeStateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BASKETCHANGESTATE_EVENT, log);
                BasketChangeStateEventResponse typedResponse = new BasketChangeStateEventResponse();
                typedResponse.log = log;
                typedResponse.key = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.callTokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.putTokens = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.callAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.putAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.bidType = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BasketChangeStateEventResponse> basketChangeStateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BASKETCHANGESTATE_EVENT));
        return basketChangeStateEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> bidUser(String userAddress, BigInteger _bidType, BigInteger _key, BigInteger _brokerId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BIDUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userAddress), 
                new org.web3j.abi.datatypes.generated.Uint32(_bidType), 
                new org.web3j.abi.datatypes.generated.Uint32(_key), 
                new org.web3j.abi.datatypes.generated.Uint32(_brokerId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> closeBasket(BigInteger _key) {
        final Function function = new Function(
                FUNC_CLOSEBASKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBidsAmount(BigInteger _key) {
        final Function function = new Function(FUNC_GETBIDSAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> reward(BigInteger _from, BigInteger _to, BigInteger _bidType, BigInteger _key) {
        final Function function = new Function(
                FUNC_REWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_from), 
                new org.web3j.abi.datatypes.generated.Uint32(_to), 
                new org.web3j.abi.datatypes.generated.Uint32(_bidType), 
                new org.web3j.abi.datatypes.generated.Uint32(_key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferCommissionForGas(String _to, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERCOMMISSIONFORGAS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> payOutCommission(BigInteger brokerId) {
        final Function function = new Function(
                FUNC_PAYOUTCOMMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(brokerId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> payOutCommission() {
        final Function function = new Function(
                FUNC_PAYOUTCOMMISSION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCommissionProcent(BigInteger _percent) {
        final Function function = new Function(
                FUNC_SETCOMMISSIONPROCENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_percent)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setMinBid(BigInteger _minBid) {
        final Function function = new Function(
                FUNC_SETMINBID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_minBid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getCommissionDebt(BigInteger brokerId) {
        final Function function = new Function(FUNC_GETCOMMISSIONDEBT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(brokerId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getCommissionDebt() {
        final Function function = new Function(FUNC_GETCOMMISSIONDEBT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getCommissionForGas() {
        final Function function = new Function(FUNC_GETCOMMISSIONFORGAS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Betex load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Betex(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Betex load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Betex(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Betex load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Betex(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Betex load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Betex(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Betex> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _betexStorageAddress, String _betexProxy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_betexStorageAddress), 
                new org.web3j.abi.datatypes.Address(_betexProxy)));
        return deployRemoteCall(Betex.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Betex> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _betexStorageAddress, String _betexProxy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_betexStorageAddress), 
                new org.web3j.abi.datatypes.Address(_betexProxy)));
        return deployRemoteCall(Betex.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Betex> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _betexStorageAddress, String _betexProxy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_betexStorageAddress), 
                new org.web3j.abi.datatypes.Address(_betexProxy)));
        return deployRemoteCall(Betex.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Betex> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _betexStorageAddress, String _betexProxy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_betexStorageAddress), 
                new org.web3j.abi.datatypes.Address(_betexProxy)));
        return deployRemoteCall(Betex.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class BidUserEventResponse {
        public Log log;

        public String user;

        public BigInteger val;

        public BigInteger bidType;

        public BigInteger key;

        public BigInteger brokerId;

        public BigInteger timestamp;
    }

    public static class RewardUserEventResponse {
        public Log log;

        public String user;

        public BigInteger val;

        public BigInteger winValue;

        public BigInteger bidType;

        public BigInteger key;

        public BigInteger timestamp;
    }

    public static class BasketChangeStateEventResponse {
        public Log log;

        public BigInteger key;

        public BigInteger callTokens;

        public BigInteger putTokens;

        public BigInteger callAmount;

        public BigInteger putAmount;

        public BigInteger bidType;
    }
}
